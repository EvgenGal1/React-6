	1............................
1) инициализируем в этом каталоге проект. создается файл package.json. npm работает с этой папкой как с нашим проектом
	$$ npm init -y
   
2) установка webpack, cli, dev-server. окружение. наша сборка. создается файл package-lock.json.
	$$ npm i -D webpack webpack-cli webpack-dev-server
   
3) создаем папки и файлы:
   webpack.config.js
   .babelrc
   /src/components
      readme
      /Start
         Start.jsx
   		style.css
   /layout
      index.jsx - стартовый файл для проекта. синтаксис react. теги html в самом js, с помощью bable переводяться в понятный код, скажем для IE
      /css
         readme
4)  разбор dev зависимостей. core - переводчик, env - набор настроек новинок, пример стандарты JS, react - обработка JSX (jsx - преврашение html из js в понятный код), plugin - для удобства,
	$$ npm i -D @babel/core @babel/preset-env @babel/preset-react @babel/plugin-proposal-class-properties babel-loader

5) запуск установки
	$$ npm run dev

	2.................................

1) без стейтов
   ?директивы?
2) создаем компоненты и их папки с файлами.
	компоненты деляться на типы: 1. обычн компоненты(stateles) - отдаёт конечную верстку(принимает пропы и отдает вертску); 2. контейнеры(statefull) - это компон. котор. содерж в себе логику.(класс со стейтами, функц, и пр) 3. контролеры - компонеты которые содержат несколько компонентов формы объединёных общей задачей (будут происход разные события(набор текста, нажатие на кнопку) но они объедины в одну задачу(взять текст и перекинуть в массив сообщений)). 
	в react контейнера имеют внетр состояние - state(Переменная класса компонента, содержащая его состояние (набор переменных) и влияющая на его жизненный цикл.), обычн компон. могут не иметь state. Передается через ?props?(Родительский компонент передает переменные props дочернему компоненту)
	/src/components
		/Message - компонент(stateles)(функция), который будет возвращать конечную верстку нашего сообщения.
			Message.jsx
			style.css
		/Messages - компонент обертка(statefull)(класс), принимает на себя всю логику рендера наших сообшений в зависимости от того сколько их там находиться на данный момент 
			Messages.jsx
			style.css
		/ChatInput - кнопка и текстбокс. контролер.
			ChatInput.jsx
			style.css


	3.................................
0) 2ДЗ. В componentDidUpdate организовать ответ бота с задержкой
1) minimist - пакет node js, достаёт из консоли алиасы(псевдонимы)
	$$ npm i -D minimist
	создаём приложение (3 файла) которое при опред. запуске будет создавать папки, файлы, прокидывать в них базовую структуру (подойдёт и для Vue хотя там и меньше импорт файлов)
	/utils/superComponentCreator/index.js + statefull.js + stateless.js
	в package.json в scripts 
	//
	"cr-full": "node utils/superComponentCreator/ --n",
  "cr-less": "node utils/superComponentCreator/ -s --n"
  //
	// сокращенные команды 
	// создает statefull component 
	$$ npm run cr-full Name
	// создает stateless component 
	$$ npm run cr-less Name
	
